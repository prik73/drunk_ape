import { BaseApi } from '../../BaseApi';
import { StreamResponse } from '../../types';
import { BanRequest, BanResponse, CheckRequest, CheckResponse, CustomCheckRequest, CustomCheckResponse, DeleteModerationConfigResponse, DeleteModerationTemplateResponse, FlagRequest, FlagResponse, GetConfigResponse, GetModerationAnalyticsRequest, GetModerationAnalyticsResponse, GetReviewQueueItemResponse, GetUserModerationReportResponse, ModeratorStatsResponse, MuteRequest, MuteResponse, QueryFeedModerationTemplatesResponse, QueryModerationConfigsRequest, QueryModerationConfigsResponse, QueryModerationLogsRequest, QueryModerationLogsResponse, QueryReviewQueueRequest, QueryReviewQueueResponse, QueryUsageStatsRequest, QueryUsageStatsResponse, QueueStatsResponse, SubmitActionRequest, SubmitActionResponse, UnbanRequest, UnbanResponse, UnmuteRequest, UnmuteResponse, UpsertConfigRequest, UpsertConfigResponse, UpsertModerationTemplateRequest, UpsertModerationTemplateResponse } from '../models';
export declare class ModerationApi extends BaseApi {
    getModerationAnalytics: (request?: GetModerationAnalyticsRequest) => Promise<StreamResponse<GetModerationAnalyticsResponse>>;
    ban: (request: BanRequest) => Promise<StreamResponse<BanResponse>>;
    check: (request: CheckRequest) => Promise<StreamResponse<CheckResponse>>;
    upsertConfig: (request: UpsertConfigRequest) => Promise<StreamResponse<UpsertConfigResponse>>;
    deleteConfig: (request: {
        key: string;
        team?: string;
    }) => Promise<StreamResponse<DeleteModerationConfigResponse>>;
    getConfig: (request: {
        key: string;
        team?: string;
    }) => Promise<StreamResponse<GetConfigResponse>>;
    queryModerationConfigs: (request?: QueryModerationConfigsRequest) => Promise<StreamResponse<QueryModerationConfigsResponse>>;
    customCheck: (request: CustomCheckRequest) => Promise<StreamResponse<CustomCheckResponse>>;
    v2DeleteTemplate: () => Promise<StreamResponse<DeleteModerationTemplateResponse>>;
    v2QueryTemplates: () => Promise<StreamResponse<QueryFeedModerationTemplatesResponse>>;
    v2UpsertTemplate: (request: UpsertModerationTemplateRequest) => Promise<StreamResponse<UpsertModerationTemplateResponse>>;
    flag: (request: FlagRequest) => Promise<StreamResponse<FlagResponse>>;
    queryModerationLogs: (request?: QueryModerationLogsRequest) => Promise<StreamResponse<QueryModerationLogsResponse>>;
    getModeratorStats: () => Promise<StreamResponse<ModeratorStatsResponse>>;
    mute: (request: MuteRequest) => Promise<StreamResponse<MuteResponse>>;
    getQueueStats: () => Promise<StreamResponse<QueueStatsResponse>>;
    queryReviewQueue: (request?: QueryReviewQueueRequest) => Promise<StreamResponse<QueryReviewQueueResponse>>;
    getReviewQueueItem: (request: {
        id: string;
    }) => Promise<StreamResponse<GetReviewQueueItemResponse>>;
    submitAction: (request: SubmitActionRequest) => Promise<StreamResponse<SubmitActionResponse>>;
    unban: (request: UnbanRequest & {
        target_user_id: string;
        channel_cid?: string;
        created_by?: string;
    }) => Promise<StreamResponse<UnbanResponse>>;
    unmute: (request: UnmuteRequest) => Promise<StreamResponse<UnmuteResponse>>;
    queryUsageStats: (request?: QueryUsageStatsRequest) => Promise<StreamResponse<QueryUsageStatsResponse>>;
    getUserReport: (request: {
        user_id: string;
        create_user_if_not_exists?: boolean;
        include_user_mutes?: boolean;
        include_user_blocks?: boolean;
    }) => Promise<StreamResponse<GetUserModerationReportResponse>>;
}
